# Generated by Django 5.1.6 on 2025-10-06 20:40

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import myapp.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='UserTrustLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(unique=True)),
                ('title', models.CharField(max_length=50)),
                ('required_ratings', models.IntegerField(help_text='Minimum number of ratings needed')),
                ('min_average_rating', models.FloatField(help_text='Minimum average rating needed')),
            ],
            options={
                'ordering': ['level'],
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EventComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='myapp.eventcomment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_comments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EventImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_url', models.URLField()),
                ('upload_date', models.DateTimeField(auto_now_add=True)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='myapp.eventcomment')),
            ],
        ),
        migrations.CreateModel(
            name='FriendRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_requests', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_requests', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StudyEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(db_index=True, max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('time', models.DateTimeField(db_index=True)),
                ('end_time', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('is_public', models.BooleanField(db_index=True, default=True)),
                ('event_type', models.CharField(choices=[('study', 'Study'), ('party', 'Party'), ('business', 'Business'), ('other', 'Other')], db_index=True, default='other', max_length=20)),
                ('max_participants', models.IntegerField(default=10)),
                ('auto_matching_enabled', models.BooleanField(db_index=True, default=False)),
                ('interest_tags', models.JSONField(blank=True, default=list, help_text='JSON array of interest tags for matching')),
                ('attendees', models.ManyToManyField(blank=True, related_name='attending_study_events', to=settings.AUTH_USER_MODEL)),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('invited_friends', models.ManyToManyField(blank=True, related_name='invited_study_events', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EventShare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shared_platform', models.CharField(choices=[('whatsapp', 'WhatsApp'), ('facebook', 'Facebook'), ('twitter', 'Twitter'), ('instagram', 'Instagram'), ('other', 'Other Platform')], default='other', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_shares', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shares', to='myapp.studyevent')),
            ],
        ),
        migrations.CreateModel(
            name='EventLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='myapp.eventcomment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_likes', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='myapp.studyevent')),
            ],
        ),
        migrations.CreateModel(
            name='EventInvitation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_auto_matched', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_invitations', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitation_records', to='myapp.studyevent')),
            ],
        ),
        migrations.AddField(
            model_name='eventcomment',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='myapp.studyevent'),
        ),
        migrations.CreateModel(
            name='DeclinedInvitation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('declined_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='declined_invitations', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='declined_by', to='myapp.studyevent')),
            ],
            options={
                'verbose_name': 'Declined Invitation',
                'verbose_name_plural': 'Declined Invitations',
            },
        ),
        migrations.CreateModel(
            name='UserImage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image', models.ImageField(max_length=500, upload_to=myapp.models.user_image_upload_path)),
                ('image_type', models.CharField(choices=[('profile', 'Profile Picture'), ('gallery', 'Gallery Image'), ('cover', 'Cover Photo')], default='gallery', max_length=20)),
                ('is_primary', models.BooleanField(default=False, help_text='Primary profile picture')),
                ('caption', models.CharField(blank=True, max_length=255)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('storage_key', models.CharField(blank=True, max_length=500, null=True)),
                ('public_url', models.URLField(blank=True, null=True)),
                ('mime_type', models.CharField(blank=True, max_length=100, null=True)),
                ('width', models.PositiveIntegerField(blank=True, null=True)),
                ('height', models.PositiveIntegerField(blank=True, null=True)),
                ('size_bytes', models.PositiveIntegerField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-is_primary', '-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_certified', models.BooleanField(default=False, help_text='True if this user can create public events.')),
                ('full_name', models.CharField(blank=True, help_text="User's full name", max_length=255)),
                ('university', models.CharField(blank=True, help_text="User's university", max_length=255)),
                ('degree', models.CharField(blank=True, help_text="User's degree program", max_length=255)),
                ('year', models.CharField(blank=True, help_text="User's academic year", max_length=50)),
                ('bio', models.TextField(blank=True, help_text="User's bio/description")),
                ('profile_picture', models.TextField(blank=True, help_text='Base64 encoded profile picture (deprecated)')),
                ('interests', models.JSONField(blank=True, default=list, help_text='JSON array of user interests')),
                ('skills', models.JSONField(blank=True, default=dict, help_text='JSON object mapping skill names to skill levels')),
                ('auto_invite_enabled', models.BooleanField(default=True, help_text='Whether user wants to receive automatic invites')),
                ('preferred_radius', models.FloatField(default=10.0, help_text='Preferred radius in km for event matching')),
                ('friends', models.ManyToManyField(blank=True, to='myapp.userprofile')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserInterest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interest', models.CharField(max_length=100)),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interest_items', to='myapp.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='UserRating',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, message='Rating must be at least 1'), django.core.validators.MaxValueValidator(5, message='Rating cannot exceed 5')])),
                ('reference', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event_ratings', to='myapp.studyevent')),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings_given', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings_received', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skill', models.CharField(max_length=100)),
                ('level', models.CharField(choices=[('BEGINNER', 'Beginner'), ('INTERMEDIATE', 'Intermediate'), ('ADVANCED', 'Advanced'), ('EXPERT', 'Expert')], default='BEGINNER', max_length=20)),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skill_items', to='myapp.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='UserReputationStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_ratings', models.IntegerField(default=0)),
                ('average_rating', models.FloatField(default=0.0)),
                ('events_hosted', models.IntegerField(default=0)),
                ('events_attended', models.IntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='reputation_stats', to=settings.AUTH_USER_MODEL)),
                ('trust_level', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users_at_level', to='myapp.usertrustlevel')),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=255, unique=True)),
                ('device_type', models.CharField(choices=[('ios', 'iOS'), ('android', 'Android')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devices', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'token')},
            },
        ),
        migrations.AddIndex(
            model_name='studyevent',
            index=models.Index(fields=['is_public', 'end_time'], name='myapp_study_is_publ_b64be2_idx'),
        ),
        migrations.AddIndex(
            model_name='studyevent',
            index=models.Index(fields=['host', 'is_public'], name='myapp_study_host_id_935e28_idx'),
        ),
        migrations.AddIndex(
            model_name='studyevent',
            index=models.Index(fields=['auto_matching_enabled', 'is_public'], name='myapp_study_auto_ma_11831f_idx'),
        ),
        migrations.AddIndex(
            model_name='studyevent',
            index=models.Index(fields=['event_type', 'is_public'], name='myapp_study_event_t_bb4595_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='eventlike',
            unique_together={('event', 'user', 'comment')},
        ),
        migrations.AlterUniqueTogether(
            name='eventinvitation',
            unique_together={('event', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='declinedinvitation',
            unique_together={('user', 'event')},
        ),
        migrations.AlterUniqueTogether(
            name='userinterest',
            unique_together={('user_profile', 'interest')},
        ),
        migrations.AlterUniqueTogether(
            name='userrating',
            unique_together={('from_user', 'to_user', 'event')},
        ),
        migrations.AlterUniqueTogether(
            name='userskill',
            unique_together={('user_profile', 'skill')},
        ),
    ]
