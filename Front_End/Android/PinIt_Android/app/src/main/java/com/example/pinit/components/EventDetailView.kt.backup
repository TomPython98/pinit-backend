package com.example.pinit.components

import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.tween
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.pinit.models.StudyEvent
import com.example.pinit.models.UserAccountManager
import com.example.pinit.repository.EnhancedProfileRepository
import com.example.pinit.repository.ProfileRepository
import com.example.pinit.network.ApiClient
import com.example.pinit.models.UserProfile
import com.example.pinit.models.UserReputationResponse
import android.util.Log
import com.example.pinit.ui.theme.*
import java.time.format.DateTimeFormatter
import java.util.*

/**
 * Material Design Event Detail View
 * Follows Google's Material Design principles while maintaining iOS functionality
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun EventDetailView(
    event: StudyEvent,
    onDismiss: () -> Unit,
    onRSVP: (UUID) -> Unit,
    accountManager: UserAccountManager,
    onNavigateToChat: (UUID) -> Unit = {},
    onNavigateToUserProfile: (String) -> Unit = {},
    onEditEvent: (StudyEvent) -> Unit = {},
    onReportEvent: (StudyEvent) -> Unit = {},
    onShareEvent: (StudyEvent) -> Unit = {}
) {
    var isLoadingContent by remember { mutableStateOf(true) }
    var localEvent by remember { mutableStateOf(event) }
    var showUserProfileSheet by remember { mutableStateOf(false) }
    var selectedUserProfile by remember { mutableStateOf<String?>(null) }
    var showSocialFeedSheet by remember { mutableStateOf(false) }
    var showShareSheet by remember { mutableStateOf(false) }
    var showEditSheet by remember { mutableStateOf(false) }
    var showReportSheet by remember { mutableStateOf(false) }
    var showRateUserSheet by remember { mutableStateOf(false) }
    var selectedUserToRate by remember { mutableStateOf<String?>(null) }
    var showGroupChat by remember { mutableStateOf(false) }
    var showFriendsAndSocial by remember { mutableStateOf(false) }
    var showIndividualChat by remember { mutableStateOf(false) }
    var selectedChatUser by remember { mutableStateOf<String?>(null) }

    val currentUser = accountManager.currentUser ?: "Guest"
    val isAttending = localEvent.attendees?.contains(currentUser) ?: false
    val isHosting = localEvent.host == currentUser
    val isEventCompleted = localEvent.endTime?.let { 
        java.time.LocalDateTime.now().isAfter(it) 
    } ?: false

    LaunchedEffect(Unit) {
        // Simulate loading
        kotlinx.coroutines.delay(500)
        isLoadingContent = false
    }
    
    Scaffold(
        topBar = {
            TopAppBar(
                title = { 
                    Text(
                        text = localEvent.title,
                        maxLines = 1,
                        overflow = TextOverflow.Ellipsis
                    ) 
                },
                navigationIcon = {
                    IconButton(onClick = onDismiss) {
                        Icon(Icons.Default.ArrowBack, contentDescription = "Back")
                    }
                },
                actions = {
                    if (isHosting) {
                        IconButton(onClick = { showEditSheet = true }) {
                            Icon(Icons.Default.Edit, contentDescription = "Edit Event")
                        }
                    }
                    IconButton(onClick = { showShareSheet = true }) {
                        Icon(Icons.Default.Share, contentDescription = "Share Event")
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.surface,
                    titleContentColor = MaterialTheme.colorScheme.onSurface,
                    navigationIconContentColor = MaterialTheme.colorScheme.onSurface,
                    actionIconContentColor = MaterialTheme.colorScheme.onSurface
                )
            )
        },
        floatingActionButton = {
            if (!isHosting) {
                FloatingActionButton(
                    onClick = { onRSVP(localEvent.id) },
                    containerColor = if (isAttending) 
                        MaterialTheme.colorScheme.error 
                    else 
                        MaterialTheme.colorScheme.primary
                ) {
                    Icon(
                        imageVector = if (isAttending) Icons.Default.Close else Icons.Default.Check,
                        contentDescription = if (isAttending) "Leave Event" else "Join Event"
                    )
                }
            }
        }
    ) { paddingValues ->
        if (isLoadingContent) {
        Box(
            modifier = Modifier
                .fillMaxSize()
                    .padding(paddingValues),
                contentAlignment = Alignment.Center
        ) {
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.spacedBy(16.dp)
                ) {
                    CircularProgressIndicator(
                        color = MaterialTheme.colorScheme.primary,
                        strokeWidth = 3.dp,
                        modifier = Modifier.size(48.dp)
                    )
                    Text(
                        text = "Loading event details...",
                        style = MaterialTheme.typography.bodyLarge,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
            }
        } else {
            LazyColumn(
                    modifier = Modifier
                        .fillMaxSize()
                    .padding(paddingValues),
                contentPadding = PaddingValues(16.dp),
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                item {
                    EventHeaderCard(event = localEvent, isHosting = isHosting, isAttending = isAttending)
                }

                item {
                    EventDetailsCard(event = localEvent)
                }

                item {
                    AttendeesCard(
                        event = localEvent,
                        currentUser = currentUser,
                        onShowUserProfile = { user ->
                            selectedUserProfile = user
                            showUserProfileSheet = true
                        }
                    )
                }

                item {
                    ActionButtonsCard(
                        event = localEvent,
                        isAttending = isAttending,
                        isHosting = isHosting,
                        isEventCompleted = isEventCompleted,
                        currentUser = currentUser,
                        onNavigateToChat = onNavigateToChat,
                        onEditEvent = { showEditSheet = true },
                        onReportEvent = { showReportSheet = true },
                        onShareEvent = { showShareSheet = true },
                        onShowSocialFeed = { showSocialFeedSheet = true },
                        onRateAttendees = { showRateUserSheet = true },
                        onAddToCalendar = { /* TODO: Add to calendar */ }
                    )
                }

                item {
                    SocialFeedCard(
                        event = localEvent,
                        onShowSocialFeed = { showFriendsAndSocial = true },
                        onSharePhotos = { /* TODO: Implement photo sharing */ },
                        onViewFeed = { showFriendsAndSocial = true }
                    )
                }
            }
        }
    }

    // User Profile Sheet
    if (showUserProfileSheet && selectedUserProfile != null) {
        UserProfileSheet(
            username = selectedUserProfile!!,
            onDismiss = {
                showUserProfileSheet = false
                selectedUserProfile = null
            },
            accountManager = accountManager
        )
    }

    // Social Feed Sheet
    if (showSocialFeedSheet) {
        SocialFeedSheet(
            event = localEvent,
            onDismiss = { showSocialFeedSheet = false }
        )
    }

    // Share Sheet
    if (showShareSheet) {
        ShareEventSheet(
            event = localEvent,
            onDismiss = { showShareSheet = false }
        )
    }

    // Edit Sheet
    if (showEditSheet) {
        EditEventSheet(
            event = localEvent,
            onDismiss = { showEditSheet = false },
            onSave = { updatedEvent ->
                localEvent = updatedEvent
                showEditSheet = false
            }
        )
    }

    // Report Sheet
    if (showReportSheet) {
        ReportEventSheet(
            event = localEvent,
            onDismiss = { showReportSheet = false }
        )
    }
    
    // Rate User Sheet
    if (showRateUserSheet && selectedUserToRate != null) {
        RateUserSheet(
            event = localEvent,
            targetUser = selectedUserToRate!!,
            currentUser = currentUser,
            onDismiss = {
                showRateUserSheet = false
                selectedUserToRate = null
            }
        )
    }
    
    // Group Chat Sheet
    if (showGroupChat) {
        GroupChatSheet(
            eventId = localEvent.id,
            eventTitle = localEvent.title,
            currentUser = currentUser,
            onDismiss = { showGroupChat = false },
            onSendMessage = { eventId, message ->
                // TODO: Send group chat message via WebSocket
                Log.d("EventDetailView", "Sending group message: $message")
            }
        )
    }
    
    // Friends & Social Sheet
    if (showFriendsAndSocial) {
        FriendsAndSocialSheet(
            event = localEvent,
            accountManager = accountManager,
            onDismiss = { showFriendsAndSocial = false },
            onNavigateToChat = { username ->
                selectedChatUser = username
                showIndividualChat = true
            },
            onNavigateToGroupChat = { eventId, eventTitle ->
                showGroupChat = true
            },
            onNavigateToSocialFeed = { eventId ->
                showSocialFeedSheet = true
            }
        )
    }
    
    // Individual Chat Sheet
    if (showIndividualChat && selectedChatUser != null) {
        IndividualChatSheet(
            sender = currentUser,
            receiver = selectedChatUser!!,
            onDismiss = {
                showIndividualChat = false
                selectedChatUser = null
            },
            onSendMessage = { sender, receiver, message ->
                // TODO: Send individual chat message via WebSocket
                Log.d("EventDetailView", "Sending message from $sender to $receiver: $message")
            }
        )
    }
}

@Composable
private fun EventHeaderCard(
    event: StudyEvent,
    isHosting: Boolean,
    isAttending: Boolean
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface
        )
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(24.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Event Type and Title
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                // Event Type Icon
                Surface(
                    modifier = Modifier.size(56.dp),
                    shape = CircleShape,
                    color = getEventTypeColor(event.eventType ?: "study")
                ) {
                    Box(contentAlignment = Alignment.Center) {
                        Icon(
                            imageVector = getEventTypeIcon(event.eventType ?: "study"),
                            contentDescription = null,
                            tint = Color.White,
                            modifier = Modifier.size(28.dp)
                        )
                    }
                }

        Column(
                    modifier = Modifier.weight(1f)
        ) {
            Text(
                text = event.title,
                        style = MaterialTheme.typography.headlineMedium,
                        color = MaterialTheme.colorScheme.onSurface,
                        fontWeight = FontWeight.Bold
                    )
                    
                Text(
                        text = event.eventType?.uppercase() ?: "STUDY",
                        style = MaterialTheme.typography.labelLarge,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
            }

            // Status Chips
            Row(
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                if (isHosting) {
                    AssistChip(
                        onClick = { },
                        label = { Text("Hosting") },
                        leadingIcon = {
        Icon(
                                Icons.Default.Star,
            contentDescription = null,
                                modifier = Modifier.size(18.dp)
                            )
                        },
                        colors = AssistChipDefaults.assistChipColors(
                            containerColor = MaterialTheme.colorScheme.secondary,
                            labelColor = MaterialTheme.colorScheme.onSecondary,
                            leadingIconContentColor = MaterialTheme.colorScheme.onSecondary
                        )
                    )
                } else if (isAttending) {
                    AssistChip(
                        onClick = { },
                        label = { Text("Attending") },
                        leadingIcon = {
                            Icon(
                                Icons.Default.CheckCircle,
                                contentDescription = null,
                                modifier = Modifier.size(18.dp)
                            )
                        },
                        colors = AssistChipDefaults.assistChipColors(
                            containerColor = MaterialTheme.colorScheme.primary,
                            labelColor = MaterialTheme.colorScheme.onPrimary,
                            leadingIconContentColor = MaterialTheme.colorScheme.onPrimary
                        )
                    )
                }
            }
        }
    }
}

// Friends & Social Sheet
@Composable
private fun FriendsAndSocialSheet(
    event: StudyEvent,
    accountManager: UserAccountManager,
    onDismiss: () -> Unit,
    onNavigateToChat: (String) -> Unit = {},
    onNavigateToGroupChat: (String, String) -> Unit = { _, _ -> },
    onNavigateToSocialFeed: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        FriendsAndSocialView(
            accountManager = accountManager,
            onDismiss = onDismiss,
            onNavigateToChat = onNavigateToChat,
            onNavigateToGroupChat = onNavigateToGroupChat,
            onNavigateToSocialFeed = onNavigateToSocialFeed
        )
    }
}

// Individual Chat Sheet
@Composable
private fun IndividualChatSheet(
    sender: String,
    receiver: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String, String) -> Unit = { _, _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        IndividualChatView(
            sender = sender,
            receiver = receiver,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Group Chat Sheet
@Composable
private fun GroupChatSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String) -> Unit = { _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        GroupChatView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Social Feed Sheet
@Composable
private fun SocialFeedSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onLikePost: (String) -> Unit = {},
    onCommentPost: (String) -> Unit = {},
    onSharePost: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        SocialFeedView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onLikePost = onLikePost,
            onCommentPost = onCommentPost,
            onSharePost = onSharePost
        )
    }
}

@Composable
private fun EventDetailsCard(event: StudyEvent) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface
        )
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(20.dp),
            verticalArrangement = Arrangement.spacedBy(20.dp)
        ) {
            // Time Section
            EventDetailItem(
                icon = Icons.Default.Schedule,
                title = "Event Schedule",
                content = {
                    Column(
                        verticalArrangement = Arrangement.spacedBy(4.dp)
        ) {
            Text(
                            text = "Start: ${formatDateTime(event.time)}",
                            style = MaterialTheme.typography.bodyMedium,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                    Text(
                            text = "End: ${formatDateTime(event.endTime ?: event.time)}",
                            style = MaterialTheme.typography.bodyMedium,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                    }
                }
            )

            // Host Section
            EventDetailItem(
                icon = Icons.Default.Person,
                title = "Event Host",
                content = {
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Text(
                        text = event.host,
                            style = MaterialTheme.typography.bodyLarge,
                            fontWeight = FontWeight.Medium,
                            color = MaterialTheme.colorScheme.onSurface
                )
                
                if (event.hostIsCertified) {
                    Icon(
                                imageVector = Icons.Default.Verified,
                        contentDescription = "Certified Host",
                                tint = MaterialTheme.colorScheme.primary,
                        modifier = Modifier.size(16.dp)
                    )
                }
            }
        }
            )

            // Description Section
            if (!event.description.isNullOrEmpty()) {
                EventDetailItem(
                    icon = Icons.Default.Description,
                    title = "Description",
                    content = {
                    Text(
                            text = event.description ?: "",
                            style = MaterialTheme.typography.bodyMedium,
                            color = MaterialTheme.colorScheme.onSurface,
                            lineHeight = 20.sp
                        )
                    }
                )
            }
        }
    }
}

// Friends & Social Sheet
@Composable
private fun FriendsAndSocialSheet(
    event: StudyEvent,
    accountManager: UserAccountManager,
    onDismiss: () -> Unit,
    onNavigateToChat: (String) -> Unit = {},
    onNavigateToGroupChat: (String, String) -> Unit = { _, _ -> },
    onNavigateToSocialFeed: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        FriendsAndSocialView(
            accountManager = accountManager,
            onDismiss = onDismiss,
            onNavigateToChat = onNavigateToChat,
            onNavigateToGroupChat = onNavigateToGroupChat,
            onNavigateToSocialFeed = onNavigateToSocialFeed
        )
    }
}

// Individual Chat Sheet
@Composable
private fun IndividualChatSheet(
    sender: String,
    receiver: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String, String) -> Unit = { _, _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        IndividualChatView(
            sender = sender,
            receiver = receiver,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Group Chat Sheet
@Composable
private fun GroupChatSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String) -> Unit = { _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        GroupChatView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Social Feed Sheet
@Composable
private fun SocialFeedSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onLikePost: (String) -> Unit = {},
    onCommentPost: (String) -> Unit = {},
    onSharePost: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        SocialFeedView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onLikePost = onLikePost,
            onCommentPost = onCommentPost,
            onSharePost = onSharePost
        )
    }
}

@Composable
private fun EventDetailItem(
    icon: ImageVector,
    title: String,
    content: @Composable () -> Unit
        ) {
            Row(
        verticalAlignment = Alignment.Top,
        horizontalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Surface(
            modifier = Modifier.size(40.dp),
            shape = CircleShape,
            color = MaterialTheme.colorScheme.primaryContainer
        ) {
            Box(contentAlignment = Alignment.Center) {
        Icon(
                    imageVector = icon,
            contentDescription = null,
                    tint = MaterialTheme.colorScheme.onPrimaryContainer,
            modifier = Modifier.size(20.dp)
        )
            }
        }

        Column(
            modifier = Modifier.weight(1f),
            verticalArrangement = Arrangement.spacedBy(4.dp)
        ) {
        Text(
                text = title,
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.SemiBold,
                color = MaterialTheme.colorScheme.onSurface
            )
            content()
        }
    }
}

// Friends & Social Sheet
@Composable
private fun FriendsAndSocialSheet(
    event: StudyEvent,
    accountManager: UserAccountManager,
    onDismiss: () -> Unit,
    onNavigateToChat: (String) -> Unit = {},
    onNavigateToGroupChat: (String, String) -> Unit = { _, _ -> },
    onNavigateToSocialFeed: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        FriendsAndSocialView(
            accountManager = accountManager,
            onDismiss = onDismiss,
            onNavigateToChat = onNavigateToChat,
            onNavigateToGroupChat = onNavigateToGroupChat,
            onNavigateToSocialFeed = onNavigateToSocialFeed
        )
    }
}

// Individual Chat Sheet
@Composable
private fun IndividualChatSheet(
    sender: String,
    receiver: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String, String) -> Unit = { _, _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        IndividualChatView(
            sender = sender,
            receiver = receiver,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Group Chat Sheet
@Composable
private fun GroupChatSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String) -> Unit = { _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        GroupChatView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Social Feed Sheet
@Composable
private fun SocialFeedSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onLikePost: (String) -> Unit = {},
    onCommentPost: (String) -> Unit = {},
    onSharePost: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        SocialFeedView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onLikePost = onLikePost,
            onCommentPost = onCommentPost,
            onSharePost = onSharePost
        )
    }
}

@Composable
private fun AttendeesCard(
    event: StudyEvent,
    currentUser: String,
    onShowUserProfile: (String) -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface
        )
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(20.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Header
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                Surface(
                    modifier = Modifier.size(40.dp),
                    shape = CircleShape,
                    color = MaterialTheme.colorScheme.primaryContainer
                ) {
                    Box(contentAlignment = Alignment.Center) {
                    Icon(
                            imageVector = Icons.Default.People,
                            contentDescription = null,
                            tint = MaterialTheme.colorScheme.onPrimaryContainer,
                    modifier = Modifier.size(20.dp)
                )
                    }
                }

                Column {
                    Text(
                        text = "Event Attendees",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.SemiBold,
                        color = MaterialTheme.colorScheme.onSurface
                    )
            Text(
                        text = "${event.attendees?.size ?: 0} attending",
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
            }

            // Host Section
            AttendeeChip(
                attendee = event.host,
                isHost = true,
                isCertified = event.hostIsCertified,
                onShowProfile = onShowUserProfile
            )

            // Attendees List
            if (!event.attendees.isNullOrEmpty()) {
                Column(
                    verticalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    event.attendees.filter { it != event.host }.forEach { attendee ->
                        AttendeeChip(
                            attendee = attendee,
                            isHost = false,
                            isCertified = false,
                            onShowProfile = onShowUserProfile
                        )
                    }
                }
            } else {
                EmptyAttendeesState()
            }
        }
    }
}

// Friends & Social Sheet
@Composable
private fun FriendsAndSocialSheet(
    event: StudyEvent,
    accountManager: UserAccountManager,
    onDismiss: () -> Unit,
    onNavigateToChat: (String) -> Unit = {},
    onNavigateToGroupChat: (String, String) -> Unit = { _, _ -> },
    onNavigateToSocialFeed: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        FriendsAndSocialView(
            accountManager = accountManager,
            onDismiss = onDismiss,
            onNavigateToChat = onNavigateToChat,
            onNavigateToGroupChat = onNavigateToGroupChat,
            onNavigateToSocialFeed = onNavigateToSocialFeed
        )
    }
}

// Individual Chat Sheet
@Composable
private fun IndividualChatSheet(
    sender: String,
    receiver: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String, String) -> Unit = { _, _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        IndividualChatView(
            sender = sender,
            receiver = receiver,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Group Chat Sheet
@Composable
private fun GroupChatSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String) -> Unit = { _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        GroupChatView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Social Feed Sheet
@Composable
private fun SocialFeedSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onLikePost: (String) -> Unit = {},
    onCommentPost: (String) -> Unit = {},
    onSharePost: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        SocialFeedView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onLikePost = onLikePost,
            onCommentPost = onCommentPost,
            onSharePost = onSharePost
        )
    }
}

@Composable
private fun AttendeeChip(
    attendee: String,
    isHost: Boolean,
    isCertified: Boolean,
    onShowProfile: (String) -> Unit
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .clickable { onShowProfile(attendee) },
        elevation = CardDefaults.cardElevation(defaultElevation = 1.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surfaceVariant
        )
    ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            // Profile Avatar
            Surface(
                modifier = Modifier.size(48.dp),
                shape = CircleShape,
                color = MaterialTheme.colorScheme.primaryContainer
            ) {
                Box(contentAlignment = Alignment.Center) {
                Text(
                        text = attendee.take(1).uppercase(),
                        style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.onPrimaryContainer
                )
                }
            }
                
                Column(
                modifier = Modifier.weight(1f)
            ) {
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    Text(
                        text = attendee,
                        style = MaterialTheme.typography.bodyLarge,
                        fontWeight = FontWeight.Medium,
                        color = MaterialTheme.colorScheme.onSurface,
                        maxLines = 1,
                        overflow = TextOverflow.Ellipsis
                    )

                    if (isHost) {
                        AssistChip(
                            onClick = { },
                            label = { Text("Host", style = MaterialTheme.typography.labelSmall) },
                            leadingIcon = {
                        Icon(
                                    Icons.Default.Star,
                                    contentDescription = null,
                                    modifier = Modifier.size(12.dp)
                                )
                            },
                            colors = AssistChipDefaults.assistChipColors(
                                containerColor = MaterialTheme.colorScheme.secondary,
                                labelColor = MaterialTheme.colorScheme.onSecondary,
                                leadingIconContentColor = MaterialTheme.colorScheme.onSecondary
                            )
                        )
                    }

                    if (isCertified) {
                        Icon(
                            imageVector = Icons.Default.Verified,
                            contentDescription = "Certified",
                            tint = MaterialTheme.colorScheme.primary,
                            modifier = Modifier.size(16.dp)
                        )
                    }
                }

                Text(
                    text = "Tap to view profile",
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }

            Icon(
                imageVector = Icons.Default.ChevronRight,
                contentDescription = "View Profile",
                tint = MaterialTheme.colorScheme.onSurfaceVariant,
                modifier = Modifier.size(20.dp)
            )
        }
    }
}

// Friends & Social Sheet
@Composable
private fun FriendsAndSocialSheet(
    event: StudyEvent,
    accountManager: UserAccountManager,
    onDismiss: () -> Unit,
    onNavigateToChat: (String) -> Unit = {},
    onNavigateToGroupChat: (String, String) -> Unit = { _, _ -> },
    onNavigateToSocialFeed: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        FriendsAndSocialView(
            accountManager = accountManager,
            onDismiss = onDismiss,
            onNavigateToChat = onNavigateToChat,
            onNavigateToGroupChat = onNavigateToGroupChat,
            onNavigateToSocialFeed = onNavigateToSocialFeed
        )
    }
}

// Individual Chat Sheet
@Composable
private fun IndividualChatSheet(
    sender: String,
    receiver: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String, String) -> Unit = { _, _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        IndividualChatView(
            sender = sender,
            receiver = receiver,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Group Chat Sheet
@Composable
private fun GroupChatSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String) -> Unit = { _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        GroupChatView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Social Feed Sheet
@Composable
private fun SocialFeedSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onLikePost: (String) -> Unit = {},
    onCommentPost: (String) -> Unit = {},
    onSharePost: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        SocialFeedView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onLikePost = onLikePost,
            onCommentPost = onCommentPost,
            onSharePost = onSharePost
        )
    }
}

@Composable
private fun EmptyAttendeesState() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surfaceVariant
        )
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(32.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Icon(
                imageVector = Icons.Default.PeopleOutline,
                contentDescription = null,
                tint = MaterialTheme.colorScheme.onSurfaceVariant,
                modifier = Modifier.size(32.dp)
            )
                Text(
                text = "No attendees yet",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
    }
}

// Friends & Social Sheet
@Composable
private fun FriendsAndSocialSheet(
    event: StudyEvent,
    accountManager: UserAccountManager,
    onDismiss: () -> Unit,
    onNavigateToChat: (String) -> Unit = {},
    onNavigateToGroupChat: (String, String) -> Unit = { _, _ -> },
    onNavigateToSocialFeed: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        FriendsAndSocialView(
            accountManager = accountManager,
            onDismiss = onDismiss,
            onNavigateToChat = onNavigateToChat,
            onNavigateToGroupChat = onNavigateToGroupChat,
            onNavigateToSocialFeed = onNavigateToSocialFeed
        )
    }
}

// Individual Chat Sheet
@Composable
private fun IndividualChatSheet(
    sender: String,
    receiver: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String, String) -> Unit = { _, _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        IndividualChatView(
            sender = sender,
            receiver = receiver,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Group Chat Sheet
@Composable
private fun GroupChatSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String) -> Unit = { _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        GroupChatView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Social Feed Sheet
@Composable
private fun SocialFeedSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onLikePost: (String) -> Unit = {},
    onCommentPost: (String) -> Unit = {},
    onSharePost: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        SocialFeedView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onLikePost = onLikePost,
            onCommentPost = onCommentPost,
            onSharePost = onSharePost
        )
    }
}

@Composable
private fun ActionButtonsCard(
    event: StudyEvent,
    isAttending: Boolean,
    isHosting: Boolean,
    isEventCompleted: Boolean,
    currentUser: String,
    onNavigateToChat: (UUID) -> Unit,
    onEditEvent: () -> Unit,
    onReportEvent: () -> Unit,
    onShareEvent: () -> Unit,
    onShowSocialFeed: () -> Unit,
    onRateAttendees: () -> Unit = {},
    onAddToCalendar: () -> Unit = {}
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface
        )
) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
                .padding(20.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Header
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                Surface(
                    modifier = Modifier.size(40.dp),
                    shape = CircleShape,
                    color = MaterialTheme.colorScheme.secondaryContainer
                ) {
                    Box(contentAlignment = Alignment.Center) {
                Icon(
                            imageVector = Icons.Default.Settings,
                            contentDescription = null,
                            tint = MaterialTheme.colorScheme.onSecondaryContainer,
                            modifier = Modifier.size(20.dp)
                        )
                    }
                }

                Text(
                    text = "Event Actions",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.SemiBold,
                    color = MaterialTheme.colorScheme.onSurface
                )
            }

            // Action Buttons Grid
            Column(
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                // Primary Action Button (Join/Leave/Hosting) - iOS style
        Button(
                    onClick = { /* Handle RSVP */ },
            modifier = Modifier.fillMaxWidth(),
            colors = ButtonDefaults.buttonColors(
                        containerColor = if (isHosting) 
                            MaterialTheme.colorScheme.secondary
                        else if (isAttending) 
                            MaterialTheme.colorScheme.error
                        else 
                            MaterialTheme.colorScheme.primary
                    ),
                    shape = RoundedCornerShape(12.dp)
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.spacedBy(12.dp)
                    ) {
                        Icon(
                            imageVector = if (isHosting) Icons.Default.Star 
                            else if (isAttending) Icons.Default.Close 
                            else Icons.Default.Check,
                            contentDescription = null,
                            modifier = Modifier.size(20.dp)
                        )
                        Text(
                            text = if (isHosting) "Hosting Event" 
                            else if (isAttending) "Leave Event" 
                            else "Join Event",
                            style = MaterialTheme.typography.titleMedium,
                            fontWeight = FontWeight.SemiBold
                        )
                    }
                }

                // Secondary Actions Row
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(12.dp)
                ) {
                    // Friends & Social Button
                    OutlinedButton(
                        onClick = { showFriendsAndSocial = true },
                        modifier = Modifier.weight(1f),
                        colors = ButtonDefaults.outlinedButtonColors(
                            contentColor = MaterialTheme.colorScheme.primary
                        ),
                        shape = RoundedCornerShape(12.dp)
                    ) {
                        Icon(
                            imageVector = Icons.Default.People,
                            contentDescription = null,
                            modifier = Modifier.size(18.dp)
                )
                Spacer(modifier = Modifier.width(8.dp))
                        Text("Friends & Social")
                    }

                    // Calendar Button
                    OutlinedButton(
                        onClick = onAddToCalendar,
                        modifier = Modifier.weight(1f),
                        colors = ButtonDefaults.outlinedButtonColors(
                            contentColor = MaterialTheme.colorScheme.primary
                        ),
                        shape = RoundedCornerShape(12.dp)
                    ) {
                Icon(
                            imageVector = Icons.Default.Event,
                            contentDescription = null,
                            modifier = Modifier.size(18.dp)
                )
                Spacer(modifier = Modifier.width(8.dp))
                        Text("Calendar")
                    }
                }

                // Tertiary Actions Row
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(12.dp)
                ) {
                    // Edit Button (if hosting)
                    if (isHosting && !isEventCompleted) {
                        OutlinedButton(
                            onClick = onEditEvent,
                            modifier = Modifier.weight(1f),
                            colors = ButtonDefaults.outlinedButtonColors(
                                contentColor = MaterialTheme.colorScheme.secondary
                            ),
                            shape = RoundedCornerShape(12.dp)
                        ) {
                            Icon(
                                imageVector = Icons.Default.Edit,
                                contentDescription = null,
                                modifier = Modifier.size(18.dp)
                            )
                            Spacer(modifier = Modifier.width(8.dp))
                            Text("Edit Event")
                        }
                    }

                    // Report Button (if not hosting)
                    if (!isHosting) {
                        OutlinedButton(
                            onClick = onReportEvent,
                            modifier = Modifier.weight(1f),
                            colors = ButtonDefaults.outlinedButtonColors(
                                contentColor = MaterialTheme.colorScheme.error
                            ),
                            shape = RoundedCornerShape(12.dp)
                        ) {
                            Icon(
                                imageVector = Icons.Default.Report,
                                contentDescription = null,
                                modifier = Modifier.size(18.dp)
                            )
                            Spacer(modifier = Modifier.width(8.dp))
                            Text("Report")
                        }
                    }
                }

                // Rating Button (if event completed and user attended)
                if (isEventCompleted && event.attendees?.contains(currentUser) == true && event.attendees?.size ?: 0 > 1) {
        Button(
                        onClick = onRateAttendees,
            modifier = Modifier.fillMaxWidth(),
            colors = ButtonDefaults.buttonColors(
                            containerColor = MaterialTheme.colorScheme.tertiary
                        ),
                        shape = RoundedCornerShape(12.dp)
                    ) {
                        Row(
                            verticalAlignment = Alignment.CenterVertically,
                            horizontalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            Icon(
                                imageVector = Icons.Default.Star,
                                contentDescription = null,
                modifier = Modifier.size(20.dp)
            )
            Text(
                                text = "Rate Attendees",
                                style = MaterialTheme.typography.titleMedium,
                                fontWeight = FontWeight.SemiBold
                            )
                        }
                    }
                }
            }
        }
    }
}

// Friends & Social Sheet
@Composable
private fun FriendsAndSocialSheet(
    event: StudyEvent,
    accountManager: UserAccountManager,
    onDismiss: () -> Unit,
    onNavigateToChat: (String) -> Unit = {},
    onNavigateToGroupChat: (String, String) -> Unit = { _, _ -> },
    onNavigateToSocialFeed: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        FriendsAndSocialView(
            accountManager = accountManager,
            onDismiss = onDismiss,
            onNavigateToChat = onNavigateToChat,
            onNavigateToGroupChat = onNavigateToGroupChat,
            onNavigateToSocialFeed = onNavigateToSocialFeed
        )
    }
}

// Individual Chat Sheet
@Composable
private fun IndividualChatSheet(
    sender: String,
    receiver: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String, String) -> Unit = { _, _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        IndividualChatView(
            sender = sender,
            receiver = receiver,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Group Chat Sheet
@Composable
private fun GroupChatSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String) -> Unit = { _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        GroupChatView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Social Feed Sheet
@Composable
private fun SocialFeedSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onLikePost: (String) -> Unit = {},
    onCommentPost: (String) -> Unit = {},
    onSharePost: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        SocialFeedView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onLikePost = onLikePost,
            onCommentPost = onCommentPost,
            onSharePost = onSharePost
        )
    }
}

@Composable
private fun SocialFeedCard(
    event: StudyEvent,
    onShowSocialFeed: () -> Unit,
    onSharePhotos: () -> Unit = {},
    onViewFeed: () -> Unit = {}
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface
        )
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(20.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Header
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                Surface(
                    modifier = Modifier.size(40.dp),
                    shape = CircleShape,
                    color = MaterialTheme.colorScheme.primaryContainer
                ) {
                    Box(contentAlignment = Alignment.Center) {
                Icon(
                            imageVector = Icons.Default.PhotoLibrary,
                            contentDescription = null,
                            tint = MaterialTheme.colorScheme.onPrimaryContainer,
                            modifier = Modifier.size(20.dp)
                        )
                    }
                }

                Column {
                Text(
                        text = "Social Feed",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.SemiBold,
                        color = MaterialTheme.colorScheme.onSurface
                    )
                    Text(
                        text = "Share your experience",
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
            }

            // Social Feed Actions
            Column(
                verticalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                // Share Photos Button
                Button(
                    onClick = onSharePhotos,
                    modifier = Modifier.fillMaxWidth(),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = MaterialTheme.colorScheme.primary
                    ),
                    shape = RoundedCornerShape(12.dp)
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.spacedBy(12.dp)
                    ) {
                        Icon(
                            imageVector = Icons.Default.CameraAlt,
                            contentDescription = null,
                            modifier = Modifier.size(18.dp)
                        )
                        Column(
                            horizontalAlignment = Alignment.Start
                        ) {
                            Text(
                                text = "Share Photos",
                                style = MaterialTheme.typography.titleSmall,
                                fontWeight = FontWeight.SemiBold
                            )
                            Text(
                                text = "Upload event photos",
                                style = MaterialTheme.typography.bodySmall,
                                color = MaterialTheme.colorScheme.onPrimary.copy(alpha = 0.8f)
                            )
                        }
                Spacer(modifier = Modifier.weight(1f))
                Icon(
                            imageVector = Icons.Default.ArrowForward,
                            contentDescription = null,
                            modifier = Modifier.size(14.dp)
                        )
                    }
                }

                // View Feed Button
                Button(
                    onClick = onViewFeed,
                    modifier = Modifier.fillMaxWidth(),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = MaterialTheme.colorScheme.primary
                    ),
                    shape = RoundedCornerShape(12.dp)
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.spacedBy(12.dp)
                    ) {
                        Icon(
                            imageVector = Icons.Default.Forum,
                            contentDescription = null,
                            modifier = Modifier.size(18.dp)
                        )
                Column(
                            horizontalAlignment = Alignment.Start
                        ) {
                            Text(
                                text = "View Event Feed",
                                style = MaterialTheme.typography.titleSmall,
                                fontWeight = FontWeight.SemiBold
                            )
                            Text(
                                text = "See what others shared",
                                style = MaterialTheme.typography.bodySmall,
                                color = MaterialTheme.colorScheme.onPrimary.copy(alpha = 0.8f)
                            )
                        }
                        Spacer(modifier = Modifier.weight(1f))
                        Icon(
                            imageVector = Icons.Default.ArrowForward,
                            contentDescription = null,
                            modifier = Modifier.size(14.dp)
                        )
                    }
                }
            }
        }
    }
}

// Friends & Social Sheet
@Composable
private fun FriendsAndSocialSheet(
    event: StudyEvent,
    accountManager: UserAccountManager,
    onDismiss: () -> Unit,
    onNavigateToChat: (String) -> Unit = {},
    onNavigateToGroupChat: (String, String) -> Unit = { _, _ -> },
    onNavigateToSocialFeed: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        FriendsAndSocialView(
            accountManager = accountManager,
            onDismiss = onDismiss,
            onNavigateToChat = onNavigateToChat,
            onNavigateToGroupChat = onNavigateToGroupChat,
            onNavigateToSocialFeed = onNavigateToSocialFeed
        )
    }
}

// Individual Chat Sheet
@Composable
private fun IndividualChatSheet(
    sender: String,
    receiver: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String, String) -> Unit = { _, _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        IndividualChatView(
            sender = sender,
            receiver = receiver,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Group Chat Sheet
@Composable
private fun GroupChatSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String) -> Unit = { _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        GroupChatView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Social Feed Sheet
@Composable
private fun SocialFeedSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onLikePost: (String) -> Unit = {},
    onCommentPost: (String) -> Unit = {},
    onSharePost: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        SocialFeedView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onLikePost = onLikePost,
            onCommentPost = onCommentPost,
            onSharePost = onSharePost
        )
    }
}

// Helper functions
private fun getEventTypeColor(eventType: String): Color {
    return when (eventType.lowercase()) {
        "study" -> Color(0xFF1E3A8A)      // Blue
        "social" -> Color(0xFF8B5CF6)     // Purple
        "sports" -> Color(0xFFEF4444)     // Red
        "food" -> Color(0xFFF59E0B)       // Orange
        else -> Color(0xFF6B7280)         // Gray
    }
}

private fun getEventTypeIcon(eventType: String): ImageVector {
    return when (eventType.lowercase()) {
        "study" -> Icons.Default.School
        "social" -> Icons.Default.People
        "sports" -> Icons.Default.Sports
        "food" -> Icons.Default.Restaurant
        else -> Icons.Default.Event
    }
}

private fun formatDateTime(date: java.time.LocalDateTime): String {
    val formatter = DateTimeFormatter.ofPattern("MMM dd, yyyy 'at' h:mm a", Locale.getDefault())
    return date.format(formatter)
}

// User Profile Sheet - Material Design implementation with real API data
@OptIn(ExperimentalMaterial3Api::class)
@Composable
private fun UserProfileSheet(
    username: String,
    onDismiss: () -> Unit,
    accountManager: UserAccountManager
) {
    val profileRepository = remember { 
        ProfileRepository() 
    }
    val enhancedProfileRepository = remember { 
        EnhancedProfileRepository(ApiClient.apiService) 
    }
    
    var userProfile by remember { mutableStateOf<UserProfile?>(null) }
    var reputation by remember { mutableStateOf<UserReputationResponse?>(null) }
    var friends by remember { mutableStateOf<List<String>>(emptyList()) }
    var isLoading by remember { mutableStateOf(true) }
    var errorMessage by remember { mutableStateOf<String?>(null) }
    
    LaunchedEffect(username) {
        isLoading = true
        errorMessage = null
        
        try {
            // Fetch user profile
            profileRepository.getUserProfile(username).collect { result ->
                result.onSuccess { profile ->
                    userProfile = profile
                    Log.d("UserProfileSheet", "✅ Successfully loaded profile for $username")
                }.onFailure { error ->
                    errorMessage = "Failed to load profile: ${error.message}"
                    Log.e("UserProfileSheet", "❌ Failed to load profile for $username: ${error.message}")
                }
            }
            
            // Try to fetch reputation data (optional - don't fail if this doesn't work)
            try {
                enhancedProfileRepository.getUserReputation(username).collect { result ->
                    result.onSuccess { rep ->
                        reputation = rep
                        Log.d("UserProfileSheet", "✅ Successfully loaded reputation for $username")
                    }.onFailure { error ->
                        Log.w("UserProfileSheet", "⚠️ Failed to load reputation for $username: ${error.message}")
                        // Don't set error message for reputation - it's optional
                    }
                }
            } catch (e: Exception) {
                Log.w("UserProfileSheet", "⚠️ Exception loading reputation for $username: ${e.message}")
            }
            
            // Try to fetch friends data (optional - don't fail if this doesn't work)
            try {
                enhancedProfileRepository.getFriends(username).collect { result ->
                    result.onSuccess { friendsList ->
                        friends = friendsList
                        Log.d("UserProfileSheet", "✅ Successfully loaded friends for $username")
                    }.onFailure { error ->
                        Log.w("UserProfileSheet", "⚠️ Failed to load friends for $username: ${error.message}")
                        // Don't set error message for friends - it's optional
                    }
                }
            } catch (e: Exception) {
                Log.w("UserProfileSheet", "⚠️ Exception loading friends for $username: ${e.message}")
            }
            
        } catch (e: Exception) {
            errorMessage = "Failed to load user data: ${e.message}"
            Log.e("UserProfileSheet", "❌ Exception loading user data for $username: ${e.message}")
        } finally {
            isLoading = false
        }
    }
    
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface,
        contentColor = MaterialTheme.colorScheme.onSurface
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(24.dp),
            verticalArrangement = Arrangement.spacedBy(20.dp)
        ) {
            // Header
            Row(
                modifier = Modifier.fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Text(
                    text = "User Profile",
                    style = MaterialTheme.typography.headlineMedium,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.onSurface
                )
                
                IconButton(onClick = onDismiss) {
                Icon(
                        imageVector = Icons.Default.Close,
                        contentDescription = "Close",
                        tint = MaterialTheme.colorScheme.onSurface
                    )
                }
            }

            if (isLoading) {
                // Loading state
                Box(
                    modifier = Modifier.fillMaxWidth(),
                    contentAlignment = Alignment.Center
                ) {
                    CircularProgressIndicator(
                        color = MaterialTheme.colorScheme.primary
                    )
                }
            } else if (errorMessage != null) {
                // Error state
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(
                        containerColor = MaterialTheme.colorScheme.errorContainer
                    )
                ) {
                Column(
                        modifier = Modifier.padding(16.dp),
                        horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Icon(
                            imageVector = Icons.Default.Error,
                        contentDescription = "Error",
                            tint = MaterialTheme.colorScheme.onErrorContainer,
                            modifier = Modifier.size(48.dp)
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                Text(
                            text = errorMessage!!,
                            style = MaterialTheme.typography.bodyMedium,
                            color = MaterialTheme.colorScheme.onErrorContainer,
                        textAlign = TextAlign.Center
                    )
                }
            }
            } else {
                // Profile Picture and Basic Info
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),
                    colors = CardDefaults.cardColors(
                        containerColor = MaterialTheme.colorScheme.surfaceVariant
                    )
                ) {
                    Column(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(20.dp),
                        horizontalAlignment = Alignment.CenterHorizontally,
                        verticalArrangement = Arrangement.spacedBy(16.dp)
                    ) {
                        // Profile Avatar
                        Surface(
                            modifier = Modifier.size(80.dp),
                            shape = CircleShape,
                            color = MaterialTheme.colorScheme.primaryContainer
                        ) {
                            Box(contentAlignment = Alignment.Center) {
                                Text(
                                    text = username.take(1).uppercase(),
                                    style = MaterialTheme.typography.headlineLarge,
                    fontWeight = FontWeight.Bold,
                                    color = MaterialTheme.colorScheme.onPrimaryContainer
                                )
                            }
                        }

                        // Username
                        Text(
                            text = username,
                            style = MaterialTheme.typography.headlineSmall,
                            fontWeight = FontWeight.Bold,
                            color = MaterialTheme.colorScheme.onSurface
                        )

                        // Full name if available
                        userProfile?.fullName?.let { fullName ->
            Text(
                                text = fullName,
                                style = MaterialTheme.typography.bodyLarge,
                                color = MaterialTheme.colorScheme.onSurfaceVariant
                            )
                        }

                        // University info if available
                        userProfile?.university?.let { university ->
                            Text(
                                text = university,
                                style = MaterialTheme.typography.bodyMedium,
                                color = MaterialTheme.colorScheme.onSurfaceVariant
                            )
                        }

                        // Verified Badge (if certified)
                        if (userProfile?.isCertified == true) {
                            AssistChip(
                onClick = { },
                                label = { Text("Verified") },
                                leadingIcon = {
                                    Icon(
                                        Icons.Default.Verified,
                                        contentDescription = null,
                                        modifier = Modifier.size(16.dp)
                                    )
                                },
                                colors = AssistChipDefaults.assistChipColors(
                                    containerColor = MaterialTheme.colorScheme.primary,
                                    labelColor = MaterialTheme.colorScheme.onPrimary,
                                    leadingIconContentColor = MaterialTheme.colorScheme.onPrimary
                                )
                            )
                        }
                    }
                }

                // User Stats with real data
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),
                    colors = CardDefaults.cardColors(
                        containerColor = MaterialTheme.colorScheme.surface
                    )
) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
                            .padding(20.dp),
                        verticalArrangement = Arrangement.spacedBy(16.dp)
                    ) {
                        Text(
                            text = "Activity Stats",
                            style = MaterialTheme.typography.titleMedium,
                            fontWeight = FontWeight.SemiBold,
                            color = MaterialTheme.colorScheme.onSurface
                        )

        Row(
            modifier = Modifier.fillMaxWidth(),
                            horizontalArrangement = Arrangement.SpaceEvenly
                        ) {
                            UserStatItem(
                                label = "Events",
                                value = "${reputation?.events_hosted ?: 0}",
                                icon = Icons.Default.Event
                            )
                            UserStatItem(
                                label = "Friends",
                                value = "${friends.size}",
                                icon = Icons.Default.People
                            )
                            UserStatItem(
                                label = "Rating",
                                value = String.format("%.1f", reputation?.average_rating ?: 0.0),
                                icon = Icons.Default.Star
                            )
                        }
                    }
                }

                // Interests and Skills if available
                userProfile?.let { profile ->
                    if (profile.interests.isNotEmpty() || profile.skills.isNotEmpty()) {
                        Card(
                            modifier = Modifier.fillMaxWidth(),
                            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),
                            colors = CardDefaults.cardColors(
                                containerColor = MaterialTheme.colorScheme.surface
                            )
                        ) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
                                    .padding(20.dp),
                                verticalArrangement = Arrangement.spacedBy(12.dp)
                            ) {
                Text(
                                    text = "Interests & Skills",
                                    style = MaterialTheme.typography.titleMedium,
                                    fontWeight = FontWeight.SemiBold,
                                    color = MaterialTheme.colorScheme.onSurface
                                )
                                
                                // Interests
                                if (profile.interests.isNotEmpty()) {
                Text(
                                        text = "Interests:",
                                        style = MaterialTheme.typography.bodyMedium,
                                        fontWeight = FontWeight.Medium,
                                        color = MaterialTheme.colorScheme.onSurfaceVariant
                                    )
                                    Text(
                                        text = profile.interests.joinToString(", "),
                    style = MaterialTheme.typography.bodySmall,
                                        color = MaterialTheme.colorScheme.onSurfaceVariant
                )
        }
        
                                // Skills
                                if (profile.skills.isNotEmpty()) {
        Text(
                                        text = "Skills:",
            style = MaterialTheme.typography.bodyMedium,
                                        fontWeight = FontWeight.Medium,
                                        color = MaterialTheme.colorScheme.onSurfaceVariant
                                    )
                                    Text(
                                        text = profile.skills.keys.joinToString(", "),
                                        style = MaterialTheme.typography.bodySmall,
                                        color = MaterialTheme.colorScheme.onSurfaceVariant
                                    )
                                }
                            }
                        }
                    }
                }

                // Action Buttons
                Column(
                    modifier = Modifier.fillMaxWidth(),
                    verticalArrangement = Arrangement.spacedBy(12.dp)
                ) {
        Button(
                        onClick = { /* TODO: Implement message functionality */ },
                        modifier = Modifier.fillMaxWidth(),
            colors = ButtonDefaults.buttonColors(
                            containerColor = MaterialTheme.colorScheme.primary
                        )
                    ) {
                                Icon(
                            imageVector = Icons.Default.Message,
                            contentDescription = null,
                            modifier = Modifier.size(20.dp)
                )
                Spacer(modifier = Modifier.width(8.dp))
                        Text("Send Message")
                    }

                    OutlinedButton(
                        onClick = { /* TODO: Implement add friend functionality */ },
                        modifier = Modifier.fillMaxWidth(),
                        colors = ButtonDefaults.outlinedButtonColors(
                            contentColor = MaterialTheme.colorScheme.primary
                        )
                    ) {
                        Icon(
                            imageVector = Icons.Default.PersonAdd,
                            contentDescription = null,
                            modifier = Modifier.size(20.dp)
                        )
                Spacer(modifier = Modifier.width(8.dp))
                        Text("Add Friend")
                    }
                }
            }

            // Bottom padding for better UX
            Spacer(modifier = Modifier.height(16.dp))
        }
    }
}

// Friends & Social Sheet
@Composable
private fun FriendsAndSocialSheet(
    event: StudyEvent,
    accountManager: UserAccountManager,
    onDismiss: () -> Unit,
    onNavigateToChat: (String) -> Unit = {},
    onNavigateToGroupChat: (String, String) -> Unit = { _, _ -> },
    onNavigateToSocialFeed: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        FriendsAndSocialView(
            accountManager = accountManager,
            onDismiss = onDismiss,
            onNavigateToChat = onNavigateToChat,
            onNavigateToGroupChat = onNavigateToGroupChat,
            onNavigateToSocialFeed = onNavigateToSocialFeed
        )
    }
}

// Individual Chat Sheet
@Composable
private fun IndividualChatSheet(
    sender: String,
    receiver: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String, String) -> Unit = { _, _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        IndividualChatView(
            sender = sender,
            receiver = receiver,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Group Chat Sheet
@Composable
private fun GroupChatSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String) -> Unit = { _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        GroupChatView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Social Feed Sheet
@Composable
private fun SocialFeedSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onLikePost: (String) -> Unit = {},
    onCommentPost: (String) -> Unit = {},
    onSharePost: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        SocialFeedView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onLikePost = onLikePost,
            onCommentPost = onCommentPost,
            onSharePost = onSharePost
        )
    }
}

@Composable
private fun UserStatItem(
    label: String,
    value: String,
    icon: ImageVector
) {
            Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(4.dp)
                        ) {
                            Icon(
            imageVector = icon,
            contentDescription = label,
                                tint = MaterialTheme.colorScheme.primary,
            modifier = Modifier.size(24.dp)
                            )
                            Text(
            text = value,
            style = MaterialTheme.typography.titleMedium,
                                fontWeight = FontWeight.Bold,
            color = MaterialTheme.colorScheme.onSurface
                            )
                            Text(
            text = label,
            style = MaterialTheme.typography.bodySmall,
            color = MaterialTheme.colorScheme.onSurfaceVariant
        )
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
private fun RateUserSheet(
    event: StudyEvent,
    targetUser: String,
    currentUser: String,
    onDismiss: () -> Unit
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface,
        contentColor = MaterialTheme.colorScheme.onSurface
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(24.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
                            ) {
                                Text(
                text = "Rate $targetUser",
                style = MaterialTheme.typography.headlineSmall,
                fontWeight = FontWeight.Bold
            )
            
            Text(
                text = "How was your experience with $targetUser at this event?",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
                                    
                                    Text(
                text = "Rating functionality coming soon...",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
            
            Spacer(modifier = Modifier.height(16.dp))
            
            Button(
                onClick = onDismiss,
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("Close")
            }
        }
    }
}

// Friends & Social Sheet
@Composable
private fun FriendsAndSocialSheet(
    event: StudyEvent,
    accountManager: UserAccountManager,
    onDismiss: () -> Unit,
    onNavigateToChat: (String) -> Unit = {},
    onNavigateToGroupChat: (String, String) -> Unit = { _, _ -> },
    onNavigateToSocialFeed: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        FriendsAndSocialView(
            accountManager = accountManager,
            onDismiss = onDismiss,
            onNavigateToChat = onNavigateToChat,
            onNavigateToGroupChat = onNavigateToGroupChat,
            onNavigateToSocialFeed = onNavigateToSocialFeed
        )
    }
}

// Individual Chat Sheet
@Composable
private fun IndividualChatSheet(
    sender: String,
    receiver: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String, String) -> Unit = { _, _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        IndividualChatView(
            sender = sender,
            receiver = receiver,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Group Chat Sheet
@Composable
private fun GroupChatSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String) -> Unit = { _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        GroupChatView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Social Feed Sheet
@Composable
private fun SocialFeedSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onLikePost: (String) -> Unit = {},
    onCommentPost: (String) -> Unit = {},
    onSharePost: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        SocialFeedView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onLikePost = onLikePost,
            onCommentPost = onCommentPost,
            onSharePost = onSharePost
        )
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
private fun GroupChatSheet(
    event: StudyEvent,
    currentUser: String,
    onDismiss: () -> Unit
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface,
        contentColor = MaterialTheme.colorScheme.onSurface
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(24.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Text(
                text = "Group Chat",
                style = MaterialTheme.typography.headlineSmall,
                fontWeight = FontWeight.Bold
            )
            
            Text(
                text = "Chat with other attendees of ${event.title}",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
            
            Text(
                text = "Group chat functionality coming soon...",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
            
            Spacer(modifier = Modifier.height(16.dp))
            
            Button(
                onClick = onDismiss,
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("Close")
            }
        }
    }
}

// Friends & Social Sheet
@Composable
private fun FriendsAndSocialSheet(
    event: StudyEvent,
    accountManager: UserAccountManager,
    onDismiss: () -> Unit,
    onNavigateToChat: (String) -> Unit = {},
    onNavigateToGroupChat: (String, String) -> Unit = { _, _ -> },
    onNavigateToSocialFeed: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        FriendsAndSocialView(
            accountManager = accountManager,
            onDismiss = onDismiss,
            onNavigateToChat = onNavigateToChat,
            onNavigateToGroupChat = onNavigateToGroupChat,
            onNavigateToSocialFeed = onNavigateToSocialFeed
        )
    }
}

// Individual Chat Sheet
@Composable
private fun IndividualChatSheet(
    sender: String,
    receiver: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String, String) -> Unit = { _, _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        IndividualChatView(
            sender = sender,
            receiver = receiver,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Group Chat Sheet
@Composable
private fun GroupChatSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String) -> Unit = { _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        GroupChatView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Social Feed Sheet
@Composable
private fun SocialFeedSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onLikePost: (String) -> Unit = {},
    onCommentPost: (String) -> Unit = {},
    onSharePost: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        SocialFeedView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onLikePost = onLikePost,
            onCommentPost = onCommentPost,
            onSharePost = onSharePost
        )
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
private fun SocialFeedSheet(
    event: StudyEvent,
    onDismiss: () -> Unit
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface,
        contentColor = MaterialTheme.colorScheme.onSurface
    ) {
        Column(
                modifier = Modifier
                .fillMaxWidth()
                .padding(24.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Text(
                text = "Social Feed",
                style = MaterialTheme.typography.headlineSmall,
                fontWeight = FontWeight.Bold
            )
            
            Text(
                text = "Share photos and experiences from ${event.title}",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
            
            Text(
                text = "Social feed functionality coming soon...",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
            
            Spacer(modifier = Modifier.height(16.dp))
            
            Button(
                onClick = onDismiss,
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("Close")
            }
        }
    }
}

// Friends & Social Sheet
@Composable
private fun FriendsAndSocialSheet(
    event: StudyEvent,
    accountManager: UserAccountManager,
    onDismiss: () -> Unit,
    onNavigateToChat: (String) -> Unit = {},
    onNavigateToGroupChat: (String, String) -> Unit = { _, _ -> },
    onNavigateToSocialFeed: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        FriendsAndSocialView(
            accountManager = accountManager,
            onDismiss = onDismiss,
            onNavigateToChat = onNavigateToChat,
            onNavigateToGroupChat = onNavigateToGroupChat,
            onNavigateToSocialFeed = onNavigateToSocialFeed
        )
    }
}

// Individual Chat Sheet
@Composable
private fun IndividualChatSheet(
    sender: String,
    receiver: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String, String) -> Unit = { _, _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        IndividualChatView(
            sender = sender,
            receiver = receiver,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Group Chat Sheet
@Composable
private fun GroupChatSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String) -> Unit = { _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        GroupChatView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Social Feed Sheet
@Composable
private fun SocialFeedSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onLikePost: (String) -> Unit = {},
    onCommentPost: (String) -> Unit = {},
    onSharePost: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        SocialFeedView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onLikePost = onLikePost,
            onCommentPost = onCommentPost,
            onSharePost = onSharePost
        )
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
private fun ShareEventSheet(
    event: StudyEvent,
    onDismiss: () -> Unit
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface,
        contentColor = MaterialTheme.colorScheme.onSurface
    ) {
                Column(
                    modifier = Modifier
                .fillMaxWidth()
                .padding(24.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Text(
                text = "Share Event",
                style = MaterialTheme.typography.headlineSmall,
                fontWeight = FontWeight.Bold
            )
            
                    Text(
                text = "Share ${event.title} with your friends",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
            
                    Text(
                text = "Share functionality coming soon...",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
            
            Spacer(modifier = Modifier.height(16.dp))
            
            Button(
                onClick = onDismiss,
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("Close")
            }
        }
    }
}

// Friends & Social Sheet
@Composable
private fun FriendsAndSocialSheet(
    event: StudyEvent,
    accountManager: UserAccountManager,
    onDismiss: () -> Unit,
    onNavigateToChat: (String) -> Unit = {},
    onNavigateToGroupChat: (String, String) -> Unit = { _, _ -> },
    onNavigateToSocialFeed: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        FriendsAndSocialView(
            accountManager = accountManager,
            onDismiss = onDismiss,
            onNavigateToChat = onNavigateToChat,
            onNavigateToGroupChat = onNavigateToGroupChat,
            onNavigateToSocialFeed = onNavigateToSocialFeed
        )
    }
}

// Individual Chat Sheet
@Composable
private fun IndividualChatSheet(
    sender: String,
    receiver: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String, String) -> Unit = { _, _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        IndividualChatView(
            sender = sender,
            receiver = receiver,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Group Chat Sheet
@Composable
private fun GroupChatSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String) -> Unit = { _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        GroupChatView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Social Feed Sheet
@Composable
private fun SocialFeedSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onLikePost: (String) -> Unit = {},
    onCommentPost: (String) -> Unit = {},
    onSharePost: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        SocialFeedView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onLikePost = onLikePost,
            onCommentPost = onCommentPost,
            onSharePost = onSharePost
        )
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
private fun EditEventSheet(
    event: StudyEvent,
    onDismiss: () -> Unit,
    onSave: (StudyEvent) -> Unit
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface,
        contentColor = MaterialTheme.colorScheme.onSurface
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(24.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Text(
                text = "Edit Event",
                style = MaterialTheme.typography.headlineSmall,
                fontWeight = FontWeight.Bold
            )
            
            Text(
                text = "Edit details for ${event.title}",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
            
            Text(
                text = "Edit functionality coming soon...",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
            
            Spacer(modifier = Modifier.height(16.dp))
            
            Button(
                onClick = onDismiss,
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("Close")
            }
        }
    }
}

// Friends & Social Sheet
@Composable
private fun FriendsAndSocialSheet(
    event: StudyEvent,
    accountManager: UserAccountManager,
    onDismiss: () -> Unit,
    onNavigateToChat: (String) -> Unit = {},
    onNavigateToGroupChat: (String, String) -> Unit = { _, _ -> },
    onNavigateToSocialFeed: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        FriendsAndSocialView(
            accountManager = accountManager,
            onDismiss = onDismiss,
            onNavigateToChat = onNavigateToChat,
            onNavigateToGroupChat = onNavigateToGroupChat,
            onNavigateToSocialFeed = onNavigateToSocialFeed
        )
    }
}

// Individual Chat Sheet
@Composable
private fun IndividualChatSheet(
    sender: String,
    receiver: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String, String) -> Unit = { _, _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        IndividualChatView(
            sender = sender,
            receiver = receiver,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Group Chat Sheet
@Composable
private fun GroupChatSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String) -> Unit = { _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        GroupChatView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Social Feed Sheet
@Composable
private fun SocialFeedSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onLikePost: (String) -> Unit = {},
    onCommentPost: (String) -> Unit = {},
    onSharePost: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        SocialFeedView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onLikePost = onLikePost,
            onCommentPost = onCommentPost,
            onSharePost = onSharePost
        )
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
private fun ReportEventSheet(
    event: StudyEvent,
    onDismiss: () -> Unit
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface,
        contentColor = MaterialTheme.colorScheme.onSurface
    ) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
                .padding(24.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Text(
                text = "Report Event",
                style = MaterialTheme.typography.headlineSmall,
                fontWeight = FontWeight.Bold
            )
            
            Text(
                text = "Report ${event.title} for inappropriate content",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
            
            Text(
                text = "Report functionality coming soon...",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
            
            Spacer(modifier = Modifier.height(16.dp))
            
        Button(
                onClick = onDismiss,
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("Close")
            }
        }
    }
}

// Friends & Social Sheet
@Composable
private fun FriendsAndSocialSheet(
    event: StudyEvent,
    accountManager: UserAccountManager,
    onDismiss: () -> Unit,
    onNavigateToChat: (String) -> Unit = {},
    onNavigateToGroupChat: (String, String) -> Unit = { _, _ -> },
    onNavigateToSocialFeed: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        FriendsAndSocialView(
            accountManager = accountManager,
            onDismiss = onDismiss,
            onNavigateToChat = onNavigateToChat,
            onNavigateToGroupChat = onNavigateToGroupChat,
            onNavigateToSocialFeed = onNavigateToSocialFeed
        )
    }
}

// Individual Chat Sheet
@Composable
private fun IndividualChatSheet(
    sender: String,
    receiver: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String, String) -> Unit = { _, _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        IndividualChatView(
            sender = sender,
            receiver = receiver,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Group Chat Sheet
@Composable
private fun GroupChatSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onSendMessage: (String, String) -> Unit = { _, _ -> }
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        GroupChatView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onSendMessage = onSendMessage
        )
    }
}

// Social Feed Sheet
@Composable
private fun SocialFeedSheet(
    eventId: UUID,
    eventTitle: String,
    currentUser: String,
    onDismiss: () -> Unit,
    onLikePost: (String) -> Unit = {},
    onCommentPost: (String) -> Unit = {},
    onSharePost: (String) -> Unit = {}
) {
    ModalBottomSheet(
        onDismissRequest = onDismiss,
        containerColor = MaterialTheme.colorScheme.surface
    ) {
        SocialFeedView(
            eventId = eventId,
            eventTitle = eventTitle,
            currentUser = currentUser,
            onDismiss = onDismiss,
            onLikePost = onLikePost,
            onCommentPost = onCommentPost,
            onSharePost = onSharePost
        )
    }
} 